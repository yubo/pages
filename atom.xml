<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[侧耳倾听]]></title>
  <link href="http://www.yubo.org/atom.xml" rel="self"/>
  <link href="http://www.yubo.org/"/>
  <updated>2020-01-03T17:53:26+00:00</updated>
  <id>http://www.yubo.org/</id>
  <author>
    <name><![CDATA[YU BO]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Frequently Asked Questions at Work]]></title>
    <link href="http://www.yubo.org/blog/2020/01/03/frequently-asked-questions-at-work/"/>
    <updated>2020-01-03T22:30:31+08:00</updated>
    <id>http://www.yubo.org/blog/2020/01/03/frequently-asked-questions-at-work</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<hr />

<p>工作中经常会遇到一些问题，我尝试从个人角度给出个人见解，供大家参考。</p>

<h4>&ldquo;这个错了&#8221;，是什么意思？</h4>

<ul>
<li>不是针对你的观点（每个人都可以有自己的想法）</li>
<li>某部分事实错了</li>
<li>推理过程错了</li>
<li>结论无法外推（原因见2，3）</li>
</ul>


<h4>xxoo 软件有个专用的监控工具，我们应该用吗？</h4>

<ul>
<li>我更需要的是通用的数据接口，方便接入公司内部的监控平台。这样就可以无差别的对 xxoo 监控数据进行展示和报警。自动化的工作也成为了可能。</li>
<li>直接使用一个专用的ui工具或者界面，会让我的工作界面分裂成一个个的碎片。</li>
</ul>


<h4>A系统又出问题了，怎么搞的？</h4>

<ul>
<li>当我们想找出问题的原因之前，应该先搞清楚这是不是一个问题。（我们无法搞清楚一个不存在的问题）</li>
<li>如果系统A给出了一个明确的报错，通常这不是一个问题（能够被系统识别的错误，不算是系统的错误，一般是由外部环境导致的）。应该把注意力放在对系统A调用的输入和返回的信息上。</li>
<li>如果是 A系统 没有按照某种外部的规则运行，比如超出 B系统 的<code>负载极限</code>或者<code>规范</code>发出请求。这通常也不是问题。

<ul>
<li>理由是，A系统 很难知道外部世界的状况，他会按自己的方式去调用外部的资源。绝大多数系统都应如此</li>
</ul>
</li>
</ul>


<!--more-->


<h4>我按官方文档做的，却得不到希望的结果，我是哪里出了问题？</h4>

<ul>
<li>官方文档可能确实是错的，要知道文档的维护也是很辛苦的，如果发现问题，社区需要你的帮助</li>
<li>也有可能你在什么地方出现了问题，要找出原因，参考 <a href="https://github.com/yubo/doc/blob/master/docs/smart_questions.md">sarmt question</a></li>
</ul>


<h4>我明明 xx，却 xx，你说奇怪不奇怪？</h4>

<ul>
<li>计算机并不属于自然科学的范畴。在这个领域没有魔法，所有的东西都既可以证伪，也可以证明。</li>
<li>如果你真的想解决问题，请参考 <a href="https://github.com/yubo/doc/blob/master/docs/smart_questions.md">sarmt question</a></li>
</ul>


<h4>我要做 xx，请问我该如何开始呢？</h4>

<ul>
<li>先创建一个文件</li>
<li>写一个起始函数，c语言中这个函数是 <code>int main(int argc, char *argv[])</code></li>
<li>把你的想法填充进去</li>
<li>赶紧运行一下，看看效果。如果有问题，或者新想法，返回上一步，继续填充。</li>
</ul>


<h4>写代码有什么技巧吗？</h4>

<ul>
<li>小且稳定的代码片段是好的</li>
<li>不了解细节的代码，应该用测试用例保护起来（用了第三方库，或者依赖于特殊的运行环境等等）</li>
<li>尽量复用代码。预编译，宏处理等生成代码的技术，有时效果拔群。</li>
<li>多做思想实验，在脑海里想象代码的样子，并逐行执行他们，能节省大量时间</li>
<li>多写小段的代码，并立刻执行他们，减小获得反馈的时间，通常超过5秒以上的编译->执行->报错 周期，会让我烦躁不安</li>
<li>多看可以可以引发思考的代码。比如好的代码，或是自己写的代码</li>
<li>保持简单的逻辑，避免出现特例</li>
<li><a href="https://github.com/yubo/doc/blob/master/docs/coding_style.md">利于阅读的代码风格</a></li>
<li>将以上原则应用到尽可能更大的尺度上</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coredump信息收集]]></title>
    <link href="http://www.yubo.org/blog/2014/09/23/coredump/"/>
    <updated>2014-09-23T21:41:13+08:00</updated>
    <id>http://www.yubo.org/blog/2014/09/23/coredump</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<hr />

<p>进程的coredump文件较大,出现问题后收集起来比较费事.本文介绍一种轻量级的办法,先将core文件里的关键debug信息打印出来,后续可以非常方便的传到日志服务器中,然后可以在服务器上通过debuginfo文件还原成有用的信息</p>

<h3>需要准备的软件</h3>

<hr />

<ul>
<li><a href="https://code.google.com/p/cortex-tool/downloads/list" title="cortex">cortex</a></li>
<li>addr2line</li>
<li>gcc等</li>
</ul>


<!--more-->


<h3>例子</h3>

<hr />

<h5>先编译一个会crash的文件</h5>

<p><code>gcc -g -o a a.c</code></p>

<figure class='code'><figcaption><span>一个会crash的例子  (a.c)</span> <a href='http://www.yubo.org/downloads/code/c/gdb/a.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="o">*</span><span class="n">crash</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="o">*</span><span class="n">crash</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="s">&quot;hello world&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">foo</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>保存下debug文件</h5>

<p><code>objcopy --only-keep-debug a a.debug</code></p>

<h5>release版本去掉debug信息</h5>

<p><code>strip -g a</code></p>

<h5>运行产生core文件,确保linux内核开启了ELF_CORE选项，</h5>

<p><code>ulimit -c unlimited &amp;&amp; ./a</code></p>

<h5>导出core信息，core文件可能在不同的位置，可查看(/proc/sys/kernel/core_pattern)</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[yubo@yubo990:~/programe/c/gdb]$cortex -i core  -f reg,cal
</span><span class='line'>
</span><span class='line'>8&lt;--------------------------------------------------------------------------
</span><span class='line'>  rax:0x0000000000000000  rbx:0x0000000000000000  rcx:0x0000000000400500  rdx:0x0000000019F3ACF8
</span><span class='line'>  rbp:0x0000000019F3ABD0  rsp:0x0000000019F3ABD0  rsi:0x0000000019F3ACE8  rdi:0x00000000004005EC
</span><span class='line'>  rip:0x00000000004004C8  r8:0x0000000000400590  r9:0x0000000067D72740  r10:0x0000000019F3AA60
</span><span class='line'>  r11:0x00000000679C5680  r12:0x00000000004003D0  r13:0x0000000019F3ACE0  r14:0x0000000000000000
</span><span class='line'>  r15:0x0000000000000000  cs:0x0000000000000033  ss:0x000000000000002B  orig_rax :0x00000000FFFFFFFF
</span><span class='line'>  eflags:0x0000000000010202
</span><span class='line'>Call trace:
</span><span class='line'>  #0 at 0x00000000004004c8
</span><span class='line'>  #0 at 0x00000000004004f3 in &lt;main&gt;</span></code></pre></td></tr></table></div></figure>


<h5>还原成文件行</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[yubo@yubo990:~/programe/c/gdb]$addr2line  -e a.debug  0x00000000004004c8 0x00000000004004f3
</span><span class='line'>/home/yubo/programe/c/gdb/a.c:6
</span><span class='line'>/home/yubo/programe/c/gdb/a.c:12</span></code></pre></td></tr></table></div></figure>


<h3>资源</h3>

<hr />

<ul>
<li><a href="https://code.google.com/p/cortex-tool/downloads/list" title="cortex">cortex</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Start Octopress]]></title>
    <link href="http://www.yubo.org/blog/2012/05/12/how-to-start/"/>
    <updated>2012-05-12T22:43:39+08:00</updated>
    <id>http://www.yubo.org/blog/2012/05/12/how-to-start</id>
    <content type="html"><![CDATA[<h3>how to begin</h3>

<pre><code>git clone https://github.com/sstephenson/rbenv.git ~/.rbenv
git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
mkdir ~/git
git clone  git@github.com:yubo/yubo.github.io.git ~/git/yubo.github.io
cd ~/git/yubo.github.io
git checkout -b source origin/source
sudo apt-get install nodejs 
rbenv install 1.9.3-p547; rbenv rehash
gem install bundle; rbenv rehash
bundle install; rbenv rehash
rake setup_github_pages
</code></pre>

<h3>how to post</h3>

<pre><code>rake generate   # build static web
rake preview    # preview url  http://localhost:4000
rake deploy     # deploy to yubo.github.io
</code></pre>

<h3>Don&rsquo;t forget to commit the source for your blog.</h3>

<pre><code>cd ~/git/yubo.github.io
git add .
git commit -m 'your message'
git push origin source
</code></pre>

<!--more-->


<h3>tips</h3>

<hr />

<h5>发布blog</h5>

<pre><code>rake new_post["Zombie Ninjas Attack: A survivor's retrospective"]
</code></pre>

<hr />

<h5>发布页面</h5>

<pre><code>rake new_page[about]
# creates /source/about/index.markdown

rake new_page[about/page.html]
# creates /source/about/page.html
</code></pre>

<figure class='code'><figcaption><span>编辑 _includes/custom/navigation.html</span><a href='http://www.yubo.org'>www.yubo.org</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/about&quot;</span><span class="nt">&gt;</span>about<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h5>Excerpts</h5>

<h2>  When writing a post, you can add an HTML comment <code>&lt;!--more--&gt;</code> to split the post for an excerpt. Only the first section of the post, before the comment, will show up on the blog index.</h2>

<h5>image tag</h5>

<pre><code>&lt;img src="http://placekitten.com/890/280"&gt;
&lt;img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" &gt;
&lt;img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" &gt;
&lt;img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten"&gt;
</code></pre>

<p><img src="http://placekitten.com/890/280">
<img class="left" src="http://placekitten.com/320/250" title="Place Kitten #2" >
“上帝制作了泥人，上帝烦了。所以上帝对一些泥人说，‘站起来。看我创造的一切。高山，大海，天空，星辰。’我就是那种坐起来环顾四周的泥人。幸福的我，幸福的泥人。我，一个泥人坐了起来，看见了上帝创造的奇迹。你太棒了，上帝！世界上只有您上帝才能做到这一切！我当然不能。和您相比，我感到自己十分渺小。一想到还有许多泥人未能做起来环顾四周，我便感到自己还有一点重要。我已经得到这么多，而大多数泥人却一无所获。谢谢您的垂顾！现在泥人又躺下睡了，泥人又多少值得回忆的事啊！我曾和多少有趣的坐起来的泥人见过面啊！我爱我看见过的一切。”</p>

<p>摘自 库尔特·冯内古特《猫的摇篮》（金峰 译）</p>

<p><img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #3" ></p>

<p>&ldquo;God made mud. God got lonesome. So God said to some of the mud, &lsquo;Sit up.See all I&rsquo;ve made,&rsquo; Said God. &lsquo;The hills, the sea, the sky, the stars.&rsquo; And I, with some of the mud, had got to sit up and look around. Lucky me, lucky mud. I, mud, sat up and saw what a nice job God <img class="right" src="http://placekitten.com/300/500" width="150" height="250" title="Place Kitten #4" alt="An image of a very cute kitten">had done. Nice going God! Nobody but you could have done it God! I certainly couldn&rsquo;t have. I feel very unimportant compared to You. The only way I can feel the least bit important is to think of all the mud that didn&rsquo;t even get to sit up and look around. I got so much, and most mud got so little. Thank you for the honor! Now mud lies down again and goes to sleep. What memories for mud to have! What interesting other kinds of sitting-up mud I met! I loved everything i saw.&rdquo;</p>

<p>from Kurt Vonnegut &lt;Cat&rsquo;s Cradle></p>

<hr />

<h5>code blocks</h5>

<pre><code>``` [language] [title] [url] [link text]
code snippet
```

```c hello world http://www.yubo.org www.yubo.org
#include &lt;stdio.h&gt;
int main(int argc, char const *argv[])
{
  printf("hello world!\n");
  return 0;
}
```
</code></pre>

<figure class='code'><figcaption><span>hello world</span><a href='http://www.yubo.org'>www.yubo.org</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h5>code</h5>

<pre><code>{ % include_code hello world lang:c c/hw.c %}
</code></pre>

<figure class='code'><figcaption><span>hello world  (hw.c)</span> <a href='http://www.yubo.org/downloads/code/c/hw.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;hello world!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>  
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<h5>gist tag</h5>

<pre><code>{ % gist ac29681554ad6fe016ae  gistfile1.diff %}
</code></pre>

<div><script src='https://gist.github.com/ac29681554ad6fe016ae.js?file=gistfile1.diff'></script>
<noscript><pre><code>#include &lt;stdio.h&gt;
int main(int argc, char const *argv[])
{
-  printf(&quot;hello!\n&quot;);
+  printf(&quot;hello world!\n&quot;);
  return 0;
}</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
