<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Categories: Elf | 侧耳倾听]]></title>
  <link href="http://www.yubo.org/blog/categories/elf/atom.xml" rel="self"/>
  <link href="http://www.yubo.org/"/>
  <updated>2020-01-03T17:53:26+00:00</updated>
  <id>http://www.yubo.org/</id>
  <author>
    <name><![CDATA[YU BO]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Coredump信息收集]]></title>
    <link href="http://www.yubo.org/blog/2014/09/23/coredump/"/>
    <updated>2014-09-23T21:41:13+08:00</updated>
    <id>http://www.yubo.org/blog/2014/09/23/coredump</id>
    <content type="html"><![CDATA[<h3>简介</h3>

<hr />

<p>进程的coredump文件较大,出现问题后收集起来比较费事.本文介绍一种轻量级的办法,先将core文件里的关键debug信息打印出来,后续可以非常方便的传到日志服务器中,然后可以在服务器上通过debuginfo文件还原成有用的信息</p>

<h3>需要准备的软件</h3>

<hr />

<ul>
<li><a href="https://code.google.com/p/cortex-tool/downloads/list" title="cortex">cortex</a></li>
<li>addr2line</li>
<li>gcc等</li>
</ul>


<!--more-->


<h3>例子</h3>

<hr />

<h5>先编译一个会crash的文件</h5>

<p><code>gcc -g -o a a.c</code>
<figure class='code'><figcaption><span>一个会crash的例子  (a.c)</span> <a href='/downloads/code/c/gdb/a.c'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="kt">int</span> <span class="o">*</span><span class="n">crash</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>	<span class="o">*</span><span class="n">crash</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>	<span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="s">&quot;hello world&quot;</span><span class="p">;</span>
</span><span class='line'>	<span class="n">foo</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<h5>保存下debug文件</h5>

<p><code>objcopy --only-keep-debug a a.debug</code></p>

<h5>release版本去掉debug信息</h5>

<p><code>strip -g a</code></p>

<h5>运行产生core文件,确保linux内核开启了ELF_CORE选项，</h5>

<p><code>ulimit -c unlimited &amp;&amp; ./a</code></p>

<h5>导出core信息，core文件可能在不同的位置，可查看(/proc/sys/kernel/core_pattern)</h5>

<pre><code>[yubo@yubo990:~/programe/c/gdb]$cortex -i core  -f reg,cal

8&lt;--------------------------------------------------------------------------
  rax:0x0000000000000000  rbx:0x0000000000000000  rcx:0x0000000000400500  rdx:0x0000000019F3ACF8
  rbp:0x0000000019F3ABD0  rsp:0x0000000019F3ABD0  rsi:0x0000000019F3ACE8  rdi:0x00000000004005EC
  rip:0x00000000004004C8  r8:0x0000000000400590  r9:0x0000000067D72740  r10:0x0000000019F3AA60
  r11:0x00000000679C5680  r12:0x00000000004003D0  r13:0x0000000019F3ACE0  r14:0x0000000000000000
  r15:0x0000000000000000  cs:0x0000000000000033  ss:0x000000000000002B  orig_rax :0x00000000FFFFFFFF
  eflags:0x0000000000010202
Call trace:
  #0 at 0x00000000004004c8
  #0 at 0x00000000004004f3 in &lt;main&gt;
</code></pre>

<h5>还原成文件行</h5>

<pre><code>[yubo@yubo990:~/programe/c/gdb]$addr2line  -e a.debug  0x00000000004004c8 0x00000000004004f3
/home/yubo/programe/c/gdb/a.c:6
/home/yubo/programe/c/gdb/a.c:12
</code></pre>

<h3>资源</h3>

<hr />

<ul>
<li><a href="https://code.google.com/p/cortex-tool/downloads/list" title="cortex">cortex</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
